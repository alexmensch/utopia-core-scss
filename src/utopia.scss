@use "sass:math";
@use "sass:string";
@use './helpers.scss';

@function calculateClamp($params) {
  $unit: 0.0625rem;
  @if (map-get($params, "usePx")) {
    $unit: 1px;
  }

  $relativeUnit: 1vi;
  @if (map-get($params, "relativeTo") == "container") {
    $relativeUnit: 1cqi;
  }
  @if (map-get($params, "relativeTo") == "viewport-width") {
    $relativeUnit: 1vw;
  }

  $isNegative: map-get($params, "minSize") > map-get($params, "maxSize");
  $min: map-get($params, "minSize");
  $max: map-get($params, "maxSize");

  @if ($isNegative) {
    $min: map-get($params, "maxSize");
    $max: map-get($params, "minSize")
  }

  $slope: math.div((map-get($params, "maxSize") - map-get($params, "minSize")), (map-get($params, "maxWidth") - map-get($params, "minWidth")));
  $intersection: (-1 * map-get($params, "minWidth")) * $slope + map-get($params, "minSize");
  @return "clamp(#{helpers.roundValue($min * $unit)}, #{helpers.roundValue($intersection * $unit)} + #{helpers.roundValue($slope * 100) * $relativeUnit}, #{helpers.roundValue($max * $unit)})";
}

@function calculateTypeSize($config, $viewport, $step) {
  $scale: helpers.range(map-get($config, 'minWidth'), map-get($config, 'maxWidth'), map-get($config, 'minTypeScale'), map-get($config, 'maxTypeScale'), $viewport);
  $fontSize: helpers.range(map-get($config, 'minWidth'), map-get($config, 'maxWidth'), map-get($config, 'minFontSize'), map-get($config, 'maxFontSize'), $viewport);
  @return $fontSize * pow($scale, $step);
}

@function calculateTypeStep($config, $step) {
  $minSize: calculateTypeSize($config, map-get($config, 'minWidth'), $step);
  $maxSize: calculateTypeSize($config, map-get($config, 'maxWidth'), $step);

  @return (
    "step": $step,
    "minSize": $minSize,
    "maxSize": $maxSize,
    "clamp": calculateClamp((
      "minWidth": map-get($config, "minWidth"),
      "maxWidth": map-get($config, "maxWidth"),
      "minSize": $minSize,
      "maxSize": $maxSize,
      "relativeTo": map-get($config, "relativeTo")
    ))
  );
}

@function calculateTypeScale($config) {
  $steps: helpers.newList(calculateTypeStep($config, 0));

  $positiveSteps: helpers.getDefault($config, "positiveSteps", 0);
  @if ($positiveSteps != 0) {
    @for $i from 1 through $positiveSteps {
      $steps: append($steps, calculateTypeStep($config, $i));
    }
  }

  $negativeSteps: helpers.getDefault($config, "negativeSteps", 0);
  @if ($negativeSteps != 0) {
    @for $i from 1 through $negativeSteps {
      $steps: helpers.prepend($steps, calculateTypeStep($config, -1 * $i));
    }
  }

  @return $steps;
}

@mixin generateTypeScale($config) {
  @each $step in calculateTypeScale($config) {
    --step-#{map-get($step, "step")}: #{map-get($step, "clamp")};
  }
}

@function calculateSpaceSize($config, $multiplier, $step) {
  $minSize: math.round(map-get($config, "minSize") * $multiplier);
  $maxSize: math.round(map-get($config, "maxSize") * $multiplier);

  $label: 's';
  @if ($step == 1) {
    $label: 'm';
  } @else if ($step == 2) {
    $label: 'l';
  } @else if ($step == 3) {
    $label: 'xl';
  } @else if ($step > 3) {
    $label: "#{$step - 2}xl";
  } @else if ($step == -1) {
    $label: 'xs';
  } @else if ($step < -1) {
    $label: "#{math.abs($step)}xs";
  }

  @return (
    "label": $label,
    "minSize": helpers.roundValue($minSize),
    "maxSize": helpers.roundValue($maxSize),
    "clamp": calculateClamp((
      "minWidth": map-get($config, "minWidth"),
      "maxWidth": map-get($config, "maxWidth"),
      "minSize": $minSize,
      "maxSize": $maxSize,
      "relativeTo": map-get($config, "relativeTo")
    )),
    "clampPx": calculateClamp((
      "minWidth": map-get($config, "minWidth"),
      "maxWidth": map-get($config, "maxWidth"),
      "minSize": $minSize,
      "maxSize": $maxSize,
      "usePx": true,
      "relativeTo": map-get($config, "relativeTo")
    ))
  );
}

@function calculateOneUpPairs($config, $sizes) {
  $pairs: ();
  @each $size in $sizes {
    $i: index($sizes, $size);
    @if ($i > 1) {
      $prev: nth($sizes, $i - 1);

      $pairs: append($pairs, (
        "label": "#{map-get($prev, "label")}-#{map-get($size, "label")}",
        "minSize": map-get($prev, "minSize"),
        "maxSize": map-get($size, "maxSize"),
        "clamp": calculateClamp((
          "minWidth": map-get($config, "minWidth"),
          "maxWidth": map-get($config, "maxWidth"),
          "minSize": map-get($prev, "minSize"),
          "maxSize": map-get($size, "maxSize"),
          "relativeTo": map-get($config, "relativeTo")
        )),
        "clampPx": calculateClamp((
          "minWidth": map-get($config, "minWidth"),
          "maxWidth": map-get($config, "maxWidth"),
          "minSize": map-get($prev, "minSize"),
          "maxSize": map-get($size, "maxSize"),
          "usePx": true,
          "relativeTo": map-get($config, "relativeTo")
        ))
      ));
    }
  }

  @return $pairs;
}

@function findByKey($list, $key, $value) {
  @each $item in $list {
    @if (map-get($item, $key) == $value) {
      @return $item;
    }
  }

  @return false;
}

@function calculateCustomPairs($config, $sizes) {
  $pairs: ();
  $customSizes: map-get($config, "customSizes");
  @if (type-of($customSizes) != "list") {
    @return $pairs;
  }

  @each $label in $customSizes {
    $keys: string.split($label, '-', 1);
    $a: findByKey($sizes, "label", nth($keys, 1));
    $b: findByKey($sizes, "label", nth($keys, 2));
    @if (type-of($a) == "map" and type-of($b) == "map") {
      $pairs: append($pairs, (
        "label": "#{map-get($a, "label")}-#{map-get($b, "label")}",
        "minSize": map-get($a, "minSize"),
        "maxSize": map-get($b, "maxSize"),
        "clamp": calculateClamp((
          "minWidth": map-get($config, "minWidth"),
          "maxWidth": map-get($config, "maxWidth"),
          "minSize": map-get($a, "minSize"),
          "maxSize": map-get($b, "maxSize"),
          "relativeTo": map-get($config, "relativeTo")
        )),
        "clampPx": calculateClamp((
          "minWidth": map-get($config, "minWidth"),
          "maxWidth": map-get($config, "maxWidth"),
          "minSize": map-get($a, "minSize"),
          "maxSize": map-get($b, "maxSize"),
          "usePx": true,
          "relativeTo": map-get($config, "relativeTo")
        )),
      ));
    }
  }
  
  @return $pairs;
}

@function calculateSpaceScale($config) {
  $sizes: helpers.newList(calculateSpaceSize($config, 1, 0));

  $positiveSteps: map-get($config, "positiveSteps");
  @if (type-of($positiveSteps) == "list") {
    @each $step in $positiveSteps {
      $i: index($positiveSteps, $step);
      $sizes: append($sizes, calculateSpaceSize($config, $step, $i));
    }
  }

  $negativeSteps: map-get($config, "negativeSteps");
  @if (type-of($negativeSteps) == "list") {
    @each $step in $negativeSteps {
      $i: index($negativeSteps, $step);
      $sizes: helpers.prepend($sizes, calculateSpaceSize($config, $step, -1 * $i));
    }
  }

  @return (
    "sizes": $sizes,
    "oneUpPairs": calculateOneUpPairs($config, $sizes),
    "customPairs": calculateCustomPairs($config, $sizes),
  );
}

@mixin generateSpaceScale($config) {
  $scale: calculateSpaceScale($config);
  @each $size in map-get($scale, "sizes") {
    --space-#{map-get($size, "label")}: #{map-get($size, "clamp")};
  }

  @each $size in map-get($scale, "oneUpPairs") {
    --space-#{map-get($size, "label")}: #{map-get($size, "clamp")};
  }

  @each $size in map-get($scale, "customPairs") {
    --space-#{map-get($size, "label")}: #{map-get($size, "clamp")};
  }
}

:root {
  @include generateSpaceScale((
    "minWidth": 320,
    "maxWidth": 1240,
    "minSize": 18,
    "maxSize": 20,
    "positiveSteps": (1.5, 2, 3, 4, 6),
    "negativeSteps": (0.75, 0.5, 0.25),
    "customSizes": ("s-l", "l-s"),
  ));

  @include generateTypeScale((
    "minWidth": 320,
    "maxWidth": 1240,
    "minFontSize": 18,
    "maxFontSize": 20,
    "minTypeScale": 1.2,
    "maxTypeScale": 1.25,
    "positiveSteps": 5,
    "negativeSteps": 2,
  ));
}


